// This source file was auto-generated by ClassMate++
// Created: 25 Oct 2015 1:51:10 pm
// Copyright (c) 2015, HurleyWorks

#include "View.h"
#include "util/NanoUtil.h"
#include "nanogui/window.h"
#include "nanogui/theme.h"
#include "nanogui/label.h"
#include "nanogui/layout.h"
#include "nanogui/toolbutton.h"
#include "nanogui/popupbutton.h"
#include "nanogui/checkbox.h"
#include "nanogui/messagedialog.h"
#include "nanogui/vscrollpanel.h"
#include "nanogui/imageview.h"
#include "nanogui/imagepanel.h"
#include "nanogui/progressbar.h"
#include "nanogui/combobox.h"
#include "nanogui/entypo.h"

using namespace nanogui;
using namespace ci::app;
using std::cout;
using std::cerr;
using std::endl;

// ctor
View::View ()
   : nanogui::Screen()
{
   mTheme = new Theme (mNVGContext);
}

// dtor
View::~View ()
{

}

void View::create (WindowRef & ciWindow)
{
   try
   {
      initGraph (&fps, GRAPH_RENDER_FPS, "Frame Time");
      initGraph (&cpuGraph, GRAPH_RENDER_MS, "CPU Time");

      setSize (ciWindow->getSize());

      nanogui::Window * window = new nanogui::Window (this, "Button demo");
      window->setPosition (ivec2 (15, 15));
      window->setLayout (new GroupLayout());
      /* No need to store a pointer, the data structure will be automatically
         freed when the parent window is deleted */
      new Label (window, "Push buttons", "sans-bold");
      Button * b = new Button (window, "Plain button");
      b->setCallback ([] { cout << "pushed!" << endl; });
      b = new Button (window, "Styled", ENTYPO_ICON_ROCKET);
      b->setBackgroundColor (Colour (0, 0, 255, 25));
      b->setCallback ([] { cout << "pushed!" << endl; });
      new Label (window, "Toggle buttons", "sans-bold");
      b = new Button (window, "Toggle me");
      b->setFlags (Button::ToggleButton);
      b->setChangeCallback ([] (bool state)
      {
         cout << "Toggle button state: " << state << endl;
      });
      new Label (window, "Radio buttons", "sans-bold");
      b = new Button (window, "Radio button 1");
      b->setFlags (Button::RadioButton);
      b = new Button (window, "Radio button 2");
      b->setFlags (Button::RadioButton);
      new Label (window, "A tool palette", "sans-bold");
      Widget * tools = new Widget (window);
      tools->setLayout (new BoxLayout (Orientation::Horizontal,
                                       Alignment::Middle, 0, 6));
      b = new ToolButton (tools, ENTYPO_ICON_CLOUD);
      b = new ToolButton (tools, ENTYPO_ICON_FF);
      b = new ToolButton (tools, ENTYPO_ICON_COMPASS);
      b = new ToolButton (tools, ENTYPO_ICON_INSTALL);
      new Label (window, "Popup buttons", "sans-bold");
      PopupButton * popupBtn = new PopupButton (window, "Popup", ENTYPO_ICON_EXPORT);
      Popup * popup = popupBtn->popup();
      popup->setLayout (new GroupLayout());
      new Label (popup, "Arbitrary widgets can be placed here");
      new CheckBox (popup, "A check box");
      popupBtn = new PopupButton (popup, "Recursive popup", ENTYPO_ICON_FLASH);
      popup = popupBtn->popup();
      popup->setLayout (new GroupLayout());
      new CheckBox (popup, "Another check box");
      window = new nanogui::Window (this, "Basic widgets");
      window->setPosition (ivec2 (200, 15));
      window->setLayout (new GroupLayout());
      new Label (window, "Message dialog", "sans-bold");
      tools = new Widget (window);
      tools->setLayout (new BoxLayout (Orientation::Horizontal,
                                       Alignment::Middle, 0, 6));
      b = new Button (tools, "Info");
      b->setCallback ([&]
      {
         auto dlg = new MessageDialog (this, MessageDialog::Type::Information, "Title", "This is an information message");
         dlg->setCallback ([] (int result)
         {
            cout << "Dialog result: " << result << endl;
         });
      });
      b = new Button (tools, "Warn");
      b->setCallback ([&]
      {
         auto dlg = new MessageDialog (this, MessageDialog::Type::Warning, "Title", "This is a warning message");
         dlg->setCallback ([] (int result)
         {
            cout << "Dialog result: " << result << endl;
         });
      });
      b = new Button (tools, "Ask");
      b->setCallback ([&]
      {
         auto dlg = new MessageDialog (this, MessageDialog::Type::Warning, "Title", "This is a question message", "Yes", "No", true);
         dlg->setCallback ([] (int result)
         {
            cout << "Dialog result: " << result << endl;
         });
      });
      std::string iconPath ("E:/Code4/nanofish/projects/qdemos/cinder/ciNanogui/assets/icons");
      std::vector<std::pair<int, std::string>> icons = NanoUtil::loadImageDirectory (getContext(), iconPath);
      new Label (window, "Image panel & scroll panel", "sans-bold");
      PopupButton * imagePanelBtn = new PopupButton (window, "Image Panel");
      imagePanelBtn->setIcon (ENTYPO_ICON_FOLDER);
      popup = imagePanelBtn->popup();
      VScrollPanel * vscroll = new VScrollPanel (popup);
      ImagePanel * imgPanel = new ImagePanel (vscroll);
      imgPanel->setImages (icons);
      popup->setFixedSize (ivec2 (245, 150));
      new Label (window, "Selected image", "sans-bold");
      auto img = new ImageView (window);
      img->setFixedSize (ivec2 (40, 40));
      img->setImage (icons[0].first);
      imgPanel->setCallback ([ &, img, imgPanel, imagePanelBtn] (int i)
      {
         img->setImage (imgPanel->images()[i].first);
         cout << "Selected item " << i << endl;
      });
      new Label (window, "Combo box", "sans-bold");
      new ComboBox (window, { "Combo box item 1", "Combo box item 2", "Combo box item 3" });
      new Label (window, "Check box", "sans-bold");
      CheckBox * cb = new CheckBox (window, "Flag 1",
                                    [] (bool state)
      {
         cout << "Check box 1 state: " << state << endl;
      }
                                   );
      cb->setChecked (true);
      cb = new CheckBox (window, "Flag 2",
                         [] (bool state)
      {
         cout << "Check box 2 state: " << state << endl;
      }
                        );
      new Label (window, "Progress bar", "sans-bold");
      mProgress = new ProgressBar (window);
      performLayout (mNVGContext);
   }
   catch (const std::exception & e)
   {
      std::cout << e.what() << std::endl;
   }
}

void View::draw (double time)
{
   mProgress->setValue (std::fmod ((float)time / 10, 1.0f));
   drawWidgets();

   float x = 5;
   float y = mSize[1] - 40;
   renderGraph (mNVGContext, x, y, &fps, nvgRGBA (128, 0, 0, 255));
   renderGraph (mNVGContext, x + 200 + 5, y, &cpuGraph, nvgRGBA (0, 128, 0, 255));
}

bool View::mouseMove (MouseEvent e)
{
   return cursorPosCallbackEvent (e.getPos().x, e.getPos().y);
}

bool View::mouseDown (MouseEvent e)
{
   if (!e.isLeft()) return false;
   return mouseButtonCallbackEvent (MOUSE_BUTTON_LEFT, PRESS, 0);
}

bool View::mouseDrag (MouseEvent e)
{
   if (!e.isLeftDown()) return false;
   return cursorPosCallbackEvent (e.getPos().x, e.getPos().y);
}

bool View::mouseUp (MouseEvent e)
{
   if (!e.isLeft()) return false;
   return mouseButtonCallbackEvent (MOUSE_BUTTON_LEFT, RELEASE, 0);
}

void View::updatePerfGraph (float dt, float cpuTime)
{
   updateGraph (&fps, dt);
   updateGraph (&cpuGraph, cpuTime);
}


